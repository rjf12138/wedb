LSM 树 （不允许key重复）
1. 
a. 对外操作:
	增加元素：加一个增加标记，然后往数据库里写就行了。
	删除元素：加一个删除标记，然后往数据库里写就行了。
	修改元素：加一个修改标记，然后往数据库里写就行了。
	查找操作：先在内存里查找，然后再从磁盘里一层层的往下找。

b. 内部操作
	多层级合并

结构：总共有7层，第一层在内存中，剩余六层在磁盘中。
level 0: 在内存中，使用跳跃表（SkipList）来实现，当数据达到上限是便会写到磁盘中形成一个 sstable。
level 1: 最多有四个 sstable, 达到四个时将较为旧的三个sstable与下一层进行合并，如果下一层是空的那么就将这三个自行合并放到下一层
level 2: 有一个 sstable, 当大小超过 10^2 MB 便会和下一层进行合并， 如果下一层是空的就将这层放到下一层 (下面每一层都将遵循达到10^i MB 就进行合并)
	....
level 6: 这是最后一层，不会再和下一层进行合并

/////////////////////////////////////////////////////////////////////////////////////////////////

SkipList 序列化和反序列化：
最小单元键值对的格式: | mark(2个字节) | key_length(1/2个字节) | key | value_length (2/4个字节) | value | （标记位可以确认关键字最大长度或是其他一些作用）
sstable 格式: | 每个布隆过滤器索引位置 | 布隆过滤器1 | 布隆过滤器1内元素开始位置 | ... | 布隆过滤器n | 布隆过滤器n内元素开始位置 | 最小单元键值对组 |