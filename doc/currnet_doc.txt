LSM 树 （不允许key重复，key不能为空）
1. 
a. 对外操作:
	增加元素：加一个增加标记，然后往数据库里写就行了。
	删除元素：加一个删除标记，然后往数据库里写就行了。
	修改元素：加一个修改标记，然后往数据库里写就行了。
	查找操作：先在内存里查找，然后再从磁盘里一层层的往下找。

b. 内部操作
	多层级合并

结构：总共有7层，第一层在内存中，剩余六层在磁盘中。
level 0: 在内存中，使用跳跃表（SkipList）来实现，当数据达到上限是便会写到磁盘中形成一个 sstable。
level 1: 最多有四个 sstable, 达到四个时将较为旧的三个sstable与下一层进行合并，如果下一层是空的那么就将这三个自行合并放到下一层
level 2: 有一个 sstable, 当大小超过 10^2 MB 便会和下一层进行合并， 如果下一层是空的就将这层放到下一层 (下面每一层都将遵循达到10^i MB 就进行合并)
	....
level 6: 这是最后一层，不会再和下一层进行合并

/////////////////////////////////////////////////////////////////////////////////////////////////

SkipList 序列化和反序列化：
a. 最小单元键值对的格式定义: 
| mark(1个字节) | 扩展内容长度（1个字节） | 扩展内容 | 校验 | key_length(1/2个字节) | key | value_length (2/4个字节) | value |

mark 标记每一位按顺序作用：
1. 扩展位：用于扩展mark字节作用，扩展内容不应超过一个字节所能表达的长度范围，扩展内容设定和解析自定义
2. key长度扩展: 默认key的长度最大不能超过一个字节所能表示的范围，设置该位后，key的长度范围是两个字节能表示的范围
3. 
4. value长度扩展: 3和4表示值得长度，00：一个字节表示长度，01：两个字节表示长度，10：3个字节表示长度。
	（注：虽然值的最大长度能用3个字节表示，不过单个value的最大不能超过8MB。234位会根据内容长度自动设置）
5. 压缩位：该位设置后会对value进行压缩
6. 校验位：该位设置后，会对关键字和值进行校验检查内容是否正确（CRC校验）
7. 
8. 操作表示位：表示当前值是增加，修改还是删除。 00：增加， 01：修改, 10: 删除。（这两位必须设置）

b. 序列化：将每个键值对以及相关属性按上面格式不停的往后面添加就行了。
c. 反序列化：将buffer中的数据按上面格式，从头往后解析就行了。

日志功能：
每往SkipList中添加一个键值对，就先将键值对序列化添加到日志文件末尾。恢复日志文件是从文件头处开始对键值对反序列化添加到SkipList中

sstable 格式: 
| 布隆过滤器组索引位置 | 布隆过滤器1 | 布隆过滤器1内元素开始位置 | ... | 布隆过滤器n | 布隆过滤器n内元素开始位置 | 最小单元键值对组 |
// TODO: 合并