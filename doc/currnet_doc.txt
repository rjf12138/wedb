LSM 树 （不允许key重复，key不能为空，问题：key值整型或是字符串型的怎么放入（统一字符串型吧））
1. 
a. 对外操作:
	增加元素：加一个增加标记，然后往数据库里写就行了。
	删除元素：加一个删除标记，然后往数据库里写就行了。
	修改元素：加一个修改标记，然后往数据库里写就行了。
	查找操作：先在内存里查找，然后再从磁盘里一层层的往下找。

b. 内部操作
	多层级合并

结构：总共有7层，第一层在内存中，剩余六层在磁盘中。
level 1: 在内存中，使用跳跃表（SkipList）来实现，当数据达到上限是便会写到磁盘中形成一个 sstable。
level 2-6: 最多有四个文件，每一层的总大小小于 10^i MB
level 7: 只有一个文件，文件大小不设上限

/////////////////////////////////////////////////////////////////////////////////////////////////

SkipList 序列化和反序列化：
a. 最小单元键值对的格式定义: 
| mark | 扩展内容长度（可选） | 扩展内容(可选) | 校验 （可选） | key_length | key | value_length  | value |

mark 标记每一位按顺序作用：
1. 扩展位：用于扩展mark字节作用，扩展内容不应超过一个字节所能表达的长度范围，扩展内容设定和解析自定义
2. key长度扩展: 默认key的长度最大不能超过一个字节所能表示的范围，设置该位后，key的长度范围是两个字节能表示的范围
3. 
4. value长度扩展: 3和4表示值得长度，00：一个字节表示长度，01：两个字节表示长度，10：3个字节表示长度。
	（注：虽然值的最大长度能用3个字节表示，不过单个value的最大不能超过16MB。234位会根据内容长度自动设置）
5. 压缩位：该位设置后会对value进行压缩
6. 校验位：该位设置后，会对关键字和值进行校验检查内容是否正确（CRC校验）
7. 操作表示位：表示当前值是增加，删除。 0：增加, 1: 删除。（这两位必须设置）
8. 保留

b. 序列化：将每个键值对以及相关属性按上面格式不停的往后面添加就行了。
c. 反序列化：将buffer中的数据按上面格式，从头往后解析就行了。

日志功能：
每往SkipList中添加一个键值对，就先将键值对序列化添加到日志文件末尾。恢复日志文件是从文件头处开始对键值对反序列化添加到SkipList中。
当SkipList内容写入到磁盘后，删除日志文件，然后建一个新的日志文件。

sstable 格式: 
| mark | 文件校验哈希值 |  布隆过滤器组索引位置 | 布隆过滤器1 | 布隆过滤器1内元素开始位置 | ... | 布隆过滤器n | 布隆过滤器n内元素开始位置 | 最小单元键值对组 |
mark标志(2个字节)
1.
2.
3. 表示当前sstable在第几层


内存持久化到磁盘上：
1. 内存中数据超过一定大小（最小5MB，可配置），或是对SkipList操作超过一定次数（最低100次），然后将所有数据持久化到磁盘中。
2. 持久化过程：
	a. 冻结当前SkipList的插入删除修改操作，冻结当前日志文件的添加操作。
	b. 创建新的SkipList内存数据库，创建新的日志文件。
	   注意：在冻结旧的内存数据库和创建新的内存数据库之间的操作将被缓存到队列中
	   新的内存数据库创建完成后会进行同步。
	c. 将SkipList序列化到磁盘中
// 持久化的时候程序挂了怎么恢复

sstable 合并：
// TODO
